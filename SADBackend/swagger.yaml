openapi: "3.0.2"
info:
  title: "SADBackend REST API"
  description: "NodeJS + TypeScript API for the SAD Attendance System."
  version: "1.0.0"

tags:
- name: auth
  description: auth api
- name: admin
  description: admin api
- name: user
  description: user api

paths:
  /api/auth/login:
    post:
      security: []
      tags:
        - auth
      summary: Provides ability to exhange basic authentication details for a JWT token valid for 2h to be used in authenticated requests.
      requestBody:
        description: Login request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      # consumes:
      #   - application/json  
      # parameters:
      #   - in: body
      #     name: Login request
      #     description: Login request details.
      #     schema:
      #       $ref: '#/definitions/LoginRequest'
      
      responses:
        200:
          description: 'Details authenticated'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
                  Response:          # <-- image embedded into JSON
                    type: object
                    properties:
                      token:
                        type: string
                      expiry:
                        type: string
                  Error:
                    type: object
        400:
          description: 'Failed request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseAPIResponse'

  /api/admin/createAdminUser:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - admin
      summary: Create an admin user

      requestBody:
        description: Create a new Admin user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminRequest'
      responses:
        200:
          description: 'Admin user created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
                  Response:          # <-- image embedded into JSON
                    type: string
                    description: User ID
                  Error:
                    type: object
        400:
          description: 'Failed request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseAPIResponse'
  /api/users:
    get:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: "Gets all users incl. pagination"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number to navigate to
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Amount of records per page
      responses:
        200:
          description: 'Result of query'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
                  Response:          # <-- image embedded into JSON
                    type: object
                    properties:
                      "users":
                        type: array
                      "totalResults":
                        type: number
                      "limit":
                        type: number
                      "page":
                        type: number
                      "totalPages":
                        type: number
                      "pagingCounter":
                        type: number
                      "hasPrevPage":
                        type: boolean
                      "prevPage":
                        type: boolean
                      "nextPage":
                        type: number
                  Error:
                    type: object
  /api/users/{id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: "Gets User by their ID"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: MongoDb ObjectID of the user
      responses:
        200:
          description: 'Result of query'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
                  Response:          # <-- image embedded into JSON
                    type: object
                    description: "User Object"
                  Error:
                    type: object



      


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Fullname:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        middlenames:
          type: string
      required:
        - firstname
        - lastname
    Address:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressLine3:
          type: string
        addressLine4:
          type: string
        postcode:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - addressLine1
        - postcode
        - city
        - country
    BaseAPIResponse:
      type: object
      properties:
        Success:
          type: boolean
        Response:          # <-- image embedded into JSON
          type: object
        Error:
          type: object
    LoginRequest:
      type: object
      required:
          - username
          - password
      properties:
        username:
          type: string
          description: user's username
        password:
          type: string
          description: user's Password
    RegisterAdminRequest:
      type: object
      required:
          - username
          - password
          - fullname
          - address
      properties:
        username:
          type: string
          description: user's username
        password:
          type: string
          description: user's Password
        fullname:
          type: object
          $ref: '#/components/schemas/Fullname'
        Address:
          type: object
          $ref: '#/components/schemas/Address'